/* The following code was generated by JFlex 1.4.3 on 9/26/21 10:18 PM */

package com.nitnelav.metricas.halstead;
import static com.nitnelav.metricas.halstead.PyTokens.*;
import com.nitnelav.metricas.halstead.PyTokens;
import com.nitnelav.metricas.halstead.Token;
import java.util.Hashtable;
import java.lang.IllegalArgumentException;
import java.util.ArrayList;
import java.util.Stack;



/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/01/2020 07:48 from the specification file
 * <tt>src/com/rsc/pythonLexer.flex</tt>
 */
public class LexerAnalizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NORMAL = 2;
  public static final int INDENTATION = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1,  1,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\1\10\1\7\2\0\1\4\22\0\1\6\1\17\1\5\1\3"+
                  "\1\0\1\15\1\15\1\41\1\22\1\22\1\13\1\12\1\22\1\12"+
                  "\1\42\1\14\1\62\1\66\6\67\2\65\1\22\1\22\1\20\1\16"+
                  "\1\21\1\0\1\22\1\23\1\64\1\70\1\25\1\71\1\74\3\11"+
                  "\1\72\1\11\1\61\1\11\1\24\1\26\2\11\1\27\1\11\1\30"+
                  "\1\73\2\11\1\63\2\11\1\22\1\2\1\22\1\22\1\11\1\0"+
                  "\1\31\1\52\1\57\1\33\1\43\1\45\1\51\1\50\1\37\1\72"+
                  "\1\55\1\44\1\46\1\32\1\34\1\53\1\11\1\35\1\40\1\36"+
                  "\1\60\1\11\1\47\1\56\1\54\1\11\1\22\1\15\1\22\1\22"+
                  "\100\0\1\1\1\0\1\1\7\0\1\1\3\0\1\1\3\0\1\1"+
                  "\1\0\1\1\6\0\1\1\5\0\1\1\1\1\2\0\1\1\3\0"+
                  "\1\1\1\1\1\0\1\1\1\1\1\1\1\0\1\1\1\0\1\1"+
                  "\1\1\1\1\2\0\1\1\2\0\1\1\1\1\1\0\1\1\uff03\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\1\2\1\3\1\4\1\1\1\4\1\5"+
                  "\3\6\1\1\3\6\14\5\1\1\1\6\12\5\2\7"+
                  "\1\5\2\10\1\0\1\11\1\7\2\5\1\6\2\0"+
                  "\2\5\1\12\5\5\2\6\1\12\1\5\2\0\1\7"+
                  "\20\5\3\11\1\7\2\11\1\7\1\0\1\5\1\7"+
                  "\1\0\1\11\1\7\1\0\2\5\1\6\3\5\1\0"+
                  "\2\5\1\0\1\7\1\0\17\5\1\0\2\11\2\7"+
                  "\1\0\5\7\1\0\1\7\1\5\2\11\2\0\1\11"+
                  "\1\7\1\5\1\0\2\5\2\0\1\11\6\5\4\11"+
                  "\1\0\4\7\1\11\1\0\1\11\1\0\5\5\1\0"+
                  "\2\11\1\0\1\11\1\0\1\3\1\5\2\11\1\3"+
                  "\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\172"+
                  "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u01e8\0\u029f\0\u02dc\0\172"+
                  "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
                  "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
                  "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894"+
                  "\0\u08d1\0\u090e\0\u094b\0\267\0\u0988\0\u09c5\0\u09c5\0\u0a02"+
                  "\0\u0a3f\0\u0a7c\0\u01ab\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
                  "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u01ab"+
                  "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
                  "\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
                  "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1259"+
                  "\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
                  "\0\172\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
                  "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
                  "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
                  "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
                  "\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
                  "\0\u1e43\0\u1e80\0\u1ebd\0\u1441\0\172\0\u1efa\0\u1f37\0\u1f74"+
                  "\0\u01ab\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u1797"+
                  "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
                  "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
                  "\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d"+
                  "\0\u269a\0\u26d7\0\u2714\0\u2751\0\u1e80\0\u278e\0\u27cb\0\u2808"+
                  "\0\u2845\0\u2882\0\172\0\u27cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\2\4\1\5\1\6\1\7\3\10\1\11\1\12"+
                  "\1\13\1\14\2\12\1\15\1\16\1\17\1\20\1\21"+
                  "\1\22\1\11\1\23\1\24\1\25\1\26\1\27\1\30"+
                  "\1\31\1\32\1\33\1\34\1\11\1\35\1\36\1\37"+
                  "\1\40\1\41\1\11\1\42\1\11\1\43\1\44\1\45"+
                  "\1\46\2\11\1\47\1\50\1\11\1\51\1\11\1\50"+
                  "\3\52\3\11\1\50\1\53\75\3\76\0\2\54\6\0"+
                  "\1\55\11\0\16\55\2\0\17\55\1\0\2\55\3\0"+
                  "\5\55\4\5\1\0\2\5\1\0\65\5\7\0\1\10"+
                  "\65\0\2\56\1\57\1\56\1\0\1\60\1\56\1\0"+
                  "\65\56\1\0\2\54\6\0\1\11\11\0\16\11\2\0"+
                  "\32\11\16\0\1\20\71\0\1\12\2\0\1\20\72\0"+
                  "\1\12\1\0\1\20\74\0\1\20\1\0\1\12\1\20"+
                  "\71\0\1\20\2\0\1\12\54\0\2\54\6\0\1\11"+
                  "\11\0\1\11\1\61\14\11\2\0\32\11\1\0\2\54"+
                  "\6\0\1\11\11\0\3\11\1\62\12\11\2\0\32\11"+
                  "\1\0\2\54\6\0\1\11\11\0\4\11\1\63\11\11"+
                  "\2\0\32\11\1\0\2\54\2\0\1\64\3\0\1\11"+
                  "\11\0\16\11\1\65\1\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\12\11\1\66\3\11\2\0\32\11\1\0"+
                  "\2\54\6\0\1\11\11\0\7\11\1\67\5\11\1\70"+
                  "\2\0\32\11\1\0\2\54\6\0\1\11\11\0\11\11"+
                  "\1\71\4\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\16\11\2\0\1\72\31\11\1\0\2\54\6\0"+
                  "\1\11\11\0\12\11\1\63\3\11\2\0\32\11\1\0"+
                  "\2\54\2\0\1\64\3\0\1\11\11\0\6\11\1\73"+
                  "\7\11\1\65\1\0\1\74\31\11\1\0\2\54\6\0"+
                  "\1\11\11\0\12\11\1\75\3\11\2\0\32\11\1\0"+
                  "\2\54\6\0\1\11\11\0\7\11\1\76\5\11\1\77"+
                  "\2\0\2\11\1\100\1\101\26\11\41\102\1\103\33\102"+
                  "\62\0\1\104\2\0\3\104\6\0\2\54\6\0\1\11"+
                  "\11\0\7\11\1\105\6\11\2\0\1\11\1\106\11\11"+
                  "\1\107\16\11\1\0\2\54\6\0\1\11\11\0\6\11"+
                  "\1\110\7\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\11\11\1\111\1\112\1\11\1\113\1\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\14\11\1\114"+
                  "\1\11\2\0\5\11\1\115\24\11\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\1\11\1\116\30\11\1\0"+
                  "\2\54\2\0\1\64\3\0\1\11\11\0\4\11\1\24"+
                  "\5\11\1\117\3\11\1\65\1\0\32\11\1\0\2\54"+
                  "\6\0\1\11\11\0\6\11\1\120\3\11\1\121\3\11"+
                  "\2\0\32\11\1\0\2\54\6\0\1\11\11\0\14\11"+
                  "\1\122\1\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\11\11\1\123\4\11\2\0\1\11\1\124\30\11"+
                  "\1\0\2\54\2\0\1\64\3\0\1\11\11\0\4\11"+
                  "\1\24\5\11\1\24\3\11\1\65\1\0\32\11\1\0"+
                  "\2\125\6\0\1\125\11\0\3\125\1\126\5\125\1\126"+
                  "\4\125\1\0\1\104\1\127\1\130\5\125\1\131\3\125"+
                  "\1\132\2\125\1\130\1\133\1\132\1\131\1\134\2\133"+
                  "\1\125\1\127\1\130\2\125\1\0\2\125\6\0\1\125"+
                  "\11\0\16\125\1\0\1\104\1\127\1\130\14\125\1\130"+
                  "\1\52\2\125\3\52\1\125\1\127\1\130\2\125\1\0"+
                  "\2\54\6\0\1\11\11\0\6\11\1\135\7\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\55\11\0\16\55\2\0"+
                  "\32\55\2\56\1\57\1\56\1\0\1\136\1\56\1\0"+
                  "\65\56\4\137\1\0\1\140\1\137\1\0\65\137\1\0"+
                  "\2\54\6\0\1\11\11\0\2\11\1\63\13\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\5\11\1\63"+
                  "\10\11\2\0\32\11\4\64\1\0\1\141\1\64\1\0"+
                  "\65\64\41\142\1\0\33\142\1\0\2\54\6\0\1\11"+
                  "\11\0\16\11\2\0\15\11\1\143\14\11\1\0\2\54"+
                  "\6\0\1\11\11\0\10\11\1\63\5\11\2\0\32\11"+
                  "\1\0\2\54\6\0\1\11\11\0\15\11\1\144\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\13\11\1\145"+
                  "\2\11\2\0\32\11\1\0\2\54\6\0\1\11\11\0"+
                  "\16\11\2\0\1\11\2\100\27\11\1\0\2\54\6\0"+
                  "\1\11\11\0\14\11\1\146\1\11\2\0\32\11\1\0"+
                  "\2\54\6\0\1\11\11\0\13\11\1\147\2\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\16\11\2\0"+
                  "\11\11\1\100\20\11\1\0\2\54\6\0\1\11\11\0"+
                  "\16\11\2\0\10\11\1\150\21\11\1\0\2\54\3\0"+
                  "\1\151\2\0\1\11\11\0\7\11\1\152\6\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\16\11\2\0"+
                  "\10\11\1\153\21\11\41\154\1\155\33\154\41\156\1\103"+
                  "\33\156\1\0\2\125\6\0\1\125\11\0\16\125\2\0"+
                  "\1\127\16\125\1\104\2\125\3\104\1\125\1\127\1\130"+
                  "\2\125\1\0\2\54\6\0\1\11\11\0\10\11\1\100"+
                  "\5\11\2\0\32\11\1\0\2\54\6\0\1\11\11\0"+
                  "\14\11\1\157\1\160\2\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\1\161\13\11\1\162\15\11"+
                  "\1\0\2\54\6\0\1\11\11\0\16\11\2\0\3\11"+
                  "\1\163\26\11\1\0\2\54\6\0\1\11\11\0\12\11"+
                  "\1\100\3\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\11\11\1\164\4\11\2\0\32\11\1\0\2\54"+
                  "\6\0\1\11\11\0\7\11\1\165\6\11\2\0\32\11"+
                  "\1\0\2\54\6\0\1\11\11\0\13\11\1\166\2\11"+
                  "\2\0\32\11\1\0\2\54\6\0\1\11\11\0\14\11"+
                  "\1\167\1\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\11\11\1\170\4\11\2\0\32\11\1\0\2\54"+
                  "\2\0\1\64\3\0\1\11\11\0\16\11\1\65\1\0"+
                  "\1\171\31\11\1\0\2\54\6\0\1\11\11\0\15\11"+
                  "\1\172\2\0\32\11\1\0\2\54\6\0\1\11\11\0"+
                  "\14\11\1\173\1\11\2\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\1\174\31\11\1\0\2\54"+
                  "\6\0\1\11\11\0\7\11\1\175\6\11\2\0\32\11"+
                  "\1\0\2\54\6\0\1\11\11\0\6\11\1\120\7\11"+
                  "\2\0\32\11\1\0\2\125\6\0\1\125\11\0\16\125"+
                  "\1\0\1\176\17\125\1\177\2\125\3\200\5\125\1\0"+
                  "\2\125\6\0\1\125\11\0\16\125\1\0\1\176\17\125"+
                  "\1\201\2\125\1\200\2\202\5\125\1\0\2\125\6\0"+
                  "\1\125\1\203\10\0\16\125\1\0\1\176\17\125\1\177"+
                  "\2\125\3\200\5\125\1\0\2\125\6\0\1\125\11\0"+
                  "\16\125\1\0\1\176\17\125\1\204\2\125\1\200\1\205"+
                  "\1\200\5\125\1\0\2\125\6\0\1\125\11\0\1\206"+
                  "\1\125\1\206\3\125\1\206\1\125\1\206\5\125\1\0"+
                  "\1\176\1\206\1\125\1\206\4\125\1\206\4\125\1\206"+
                  "\2\125\1\207\1\125\1\206\3\210\2\206\2\125\1\206"+
                  "\1\0\2\125\6\0\1\125\11\0\16\125\1\0\1\104"+
                  "\1\127\1\130\14\125\1\130\1\133\2\125\1\134\2\133"+
                  "\1\125\1\127\1\130\2\125\42\0\1\104\1\211\16\0"+
                  "\1\134\2\0\3\134\1\0\1\211\1\212\3\0\2\54"+
                  "\6\0\1\11\11\0\16\11\2\0\1\11\1\213\30\11"+
                  "\5\0\1\214\67\0\4\137\1\0\1\215\1\137\1\0"+
                  "\65\137\4\216\1\217\1\220\1\216\1\217\65\216\41\0"+
                  "\1\141\34\0\2\54\6\0\1\11\11\0\16\11\2\0"+
                  "\1\221\31\11\1\0\2\54\6\0\1\11\11\0\16\11"+
                  "\2\0\1\222\31\11\1\0\2\54\3\0\1\223\2\0"+
                  "\1\11\11\0\16\11\2\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\15\11\1\160\2\0\32\11\1\0\2\54"+
                  "\6\0\1\11\11\0\16\11\2\0\15\11\1\224\14\11"+
                  "\1\0\2\54\6\0\1\11\11\0\16\11\2\0\15\11"+
                  "\1\225\14\11\32\0\1\226\43\0\2\54\6\0\1\11"+
                  "\11\0\16\11\1\227\1\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\11\11\1\222\4\11\2\0\32\11\41\154"+
                  "\1\230\33\154\41\0\1\230\33\0\41\156\1\215\33\156"+
                  "\1\0\2\54\6\0\1\11\11\0\16\11\2\0\2\11"+
                  "\1\100\27\11\1\0\2\54\6\0\1\11\11\0\16\11"+
                  "\2\0\1\100\31\11\1\0\2\54\6\0\1\11\11\0"+
                  "\16\11\2\0\14\11\1\100\15\11\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\1\231\31\11\1\0\2\54"+
                  "\6\0\1\11\11\0\16\11\2\0\7\11\1\232\22\11"+
                  "\1\0\2\54\6\0\1\11\11\0\16\11\2\0\3\11"+
                  "\1\100\26\11\1\0\2\54\6\0\1\11\11\0\6\11"+
                  "\1\233\7\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\16\11\2\0\5\11\1\100\24\11\1\0\2\54"+
                  "\6\0\1\11\11\0\16\11\2\0\1\11\1\160\30\11"+
                  "\1\0\2\54\6\0\1\11\11\0\16\11\2\0\7\11"+
                  "\1\234\22\11\1\0\2\54\6\0\1\11\11\0\6\11"+
                  "\1\235\7\11\2\0\32\11\1\0\2\54\6\0\1\11"+
                  "\11\0\15\11\1\100\2\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\7\11\1\225\6\11\2\0\32\11\1\0"+
                  "\2\54\6\0\1\11\11\0\16\11\2\0\1\11\1\105"+
                  "\30\11\1\0\2\54\6\0\1\11\11\0\13\11\1\236"+
                  "\2\11\2\0\32\11\62\0\1\237\2\0\3\237\6\0"+
                  "\2\125\6\0\1\125\11\0\16\125\1\0\1\237\1\240"+
                  "\12\125\1\241\3\125\1\242\1\241\1\125\1\243\2\242"+
                  "\1\125\1\240\3\125\1\0\2\125\6\0\1\125\11\0"+
                  "\16\125\1\0\1\237\1\240\16\125\1\200\2\125\3\200"+
                  "\1\125\1\240\3\125\1\0\2\125\6\0\1\125\11\0"+
                  "\16\125\1\0\1\237\1\240\1\130\11\125\1\241\2\125"+
                  "\1\130\1\244\1\241\1\125\1\243\2\244\1\125\1\240"+
                  "\3\125\1\0\2\125\6\0\1\125\11\0\16\125\1\0"+
                  "\1\237\1\240\1\130\14\125\1\130\1\202\2\125\1\200"+
                  "\2\202\1\125\1\240\3\125\62\0\1\245\2\0\3\245"+
                  "\6\0\2\125\6\0\1\125\11\0\16\125\1\0\1\237"+
                  "\1\240\1\130\11\125\1\241\2\125\1\130\1\246\1\241"+
                  "\1\125\1\243\1\246\1\242\1\125\1\240\3\125\1\0"+
                  "\2\125\6\0\1\125\11\0\16\125\1\0\1\237\1\240"+
                  "\1\130\14\125\1\130\1\205\2\125\1\200\1\205\1\200"+
                  "\1\125\1\240\3\125\1\0\2\125\6\0\1\125\11\0"+
                  "\1\206\1\125\1\206\3\125\1\206\1\125\1\206\5\125"+
                  "\1\0\1\176\1\206\1\130\1\206\4\125\1\206\4\125"+
                  "\1\206\1\125\1\130\1\207\1\125\1\206\3\210\2\206"+
                  "\2\125\1\206\1\0\2\125\6\0\1\125\11\0\1\206"+
                  "\1\125\1\206\3\125\1\206\1\125\1\206\5\125\1\0"+
                  "\1\237\1\247\1\130\1\206\4\125\1\206\3\125\1\241"+
                  "\1\206\1\125\1\130\1\210\1\241\1\206\3\210\1\206"+
                  "\1\247\2\125\1\206\1\0\2\125\6\0\1\125\11\0"+
                  "\1\206\1\125\1\206\3\125\1\206\1\125\1\206\5\125"+
                  "\1\0\1\237\1\247\1\130\1\206\4\125\1\206\4\125"+
                  "\1\206\1\125\1\130\1\210\1\125\1\206\3\210\1\206"+
                  "\1\247\2\125\1\206\12\0\1\203\63\0\2\125\6\0"+
                  "\1\125\11\0\16\125\2\0\17\125\1\0\2\125\3\0"+
                  "\5\125\1\0\2\54\6\0\1\11\11\0\15\11\1\143"+
                  "\2\0\32\11\4\216\1\217\1\250\1\216\1\217\65\216"+
                  "\5\217\1\251\67\217\4\137\1\0\1\252\1\137\1\0"+
                  "\65\137\1\0\2\54\6\0\1\11\11\0\12\11\1\225"+
                  "\3\11\2\0\32\11\37\0\1\253\36\0\2\54\6\0"+
                  "\1\11\11\0\12\11\1\254\3\11\2\0\32\11\1\0"+
                  "\2\54\6\0\1\11\11\0\13\11\1\100\2\11\2\0"+
                  "\32\11\34\0\1\227\76\0\1\20\37\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\10\11\1\225\21\11\1\0"+
                  "\2\54\6\0\1\11\11\0\10\11\1\255\5\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\16\11\2\0"+
                  "\1\11\1\256\30\11\1\0\2\54\6\0\1\11\11\0"+
                  "\6\11\1\257\7\11\2\0\32\11\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\12\11\1\100\17\11\1\0"+
                  "\2\54\6\0\1\11\11\0\14\11\1\260\1\11\2\0"+
                  "\32\11\1\0\2\125\6\0\1\125\11\0\16\125\2\0"+
                  "\1\240\16\125\1\237\2\125\3\237\1\125\1\240\3\125"+
                  "\1\0\2\125\6\0\1\125\1\261\10\0\16\125\1\0"+
                  "\1\176\17\125\1\177\2\125\3\200\5\125\1\0\2\125"+
                  "\6\0\1\125\11\0\1\241\1\125\1\241\3\125\1\241"+
                  "\1\125\1\241\5\125\1\0\1\176\1\241\1\125\1\241"+
                  "\4\125\1\241\4\125\1\241\2\125\1\262\1\125\1\241"+
                  "\3\263\2\241\2\125\1\241\1\0\2\125\6\0\1\125"+
                  "\11\0\16\125\1\0\1\237\1\240\16\125\1\242\2\125"+
                  "\1\243\2\242\1\125\1\240\3\125\42\0\1\237\1\264"+
                  "\16\0\1\243\2\0\3\243\1\0\1\264\1\265\3\0"+
                  "\2\125\6\0\1\125\11\0\16\125\1\0\1\237\1\240"+
                  "\1\130\14\125\1\130\1\244\2\125\1\243\2\244\1\125"+
                  "\1\240\3\125\1\0\2\125\6\0\1\125\11\0\16\125"+
                  "\2\0\17\125\1\245\2\125\3\245\2\125\1\130\2\125"+
                  "\1\0\2\125\6\0\1\125\11\0\16\125\1\0\1\237"+
                  "\1\240\1\130\14\125\1\130\1\246\2\125\1\243\1\246"+
                  "\1\242\1\125\1\240\3\125\1\0\2\125\6\0\1\125"+
                  "\1\261\10\0\1\206\1\125\1\206\3\125\1\206\1\125"+
                  "\1\206\5\125\1\0\1\176\1\206\1\130\1\206\4\125"+
                  "\1\206\4\125\1\206\1\125\1\130\1\207\1\125\1\206"+
                  "\3\210\2\206\2\125\1\206\5\0\1\266\67\0\4\137"+
                  "\1\0\1\267\1\137\1\0\65\137\32\0\1\20\43\0"+
                  "\2\54\6\0\1\11\11\0\7\11\1\100\6\11\2\0"+
                  "\32\11\1\0\2\54\6\0\1\11\11\0\6\11\1\100"+
                  "\7\11\2\0\32\11\1\0\2\54\6\0\1\11\11\0"+
                  "\16\11\2\0\1\11\1\75\30\11\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\1\11\1\100\30\11\1\0"+
                  "\2\54\6\0\1\11\11\0\7\11\1\270\6\11\2\0"+
                  "\32\11\62\0\1\271\2\0\3\271\6\0\2\125\6\0"+
                  "\1\125\11\0\1\241\1\125\1\241\3\125\1\241\1\125"+
                  "\1\241\5\125\1\0\1\237\1\272\1\125\1\241\4\125"+
                  "\1\241\3\125\2\241\2\125\1\263\2\241\3\263\1\241"+
                  "\1\272\2\125\1\241\1\0\2\125\6\0\1\125\11\0"+
                  "\1\241\1\125\1\241\3\125\1\241\1\125\1\241\5\125"+
                  "\1\0\1\237\1\272\1\125\1\241\4\125\1\241\4\125"+
                  "\1\241\2\125\1\263\1\125\1\241\3\263\1\241\1\272"+
                  "\2\125\1\241\12\0\1\261\67\0\1\273\67\0\4\137"+
                  "\1\0\1\274\1\137\1\0\65\137\1\0\2\54\6\0"+
                  "\1\11\11\0\16\11\2\0\15\11\1\160\14\11\1\0"+
                  "\2\125\6\0\1\125\11\0\16\125\2\0\17\125\1\271"+
                  "\2\125\3\271\5\125\1\0\2\125\6\0\1\125\1\261"+
                  "\10\0\1\241\1\125\1\241\3\125\1\241\1\125\1\241"+
                  "\5\125\1\0\1\176\1\241\1\125\1\241\4\125\1\241"+
                  "\4\125\1\241\2\125\1\262\1\125\1\241\3\263\2\241"+
                  "\2\125\1\241";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10431];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\4\1\1\11\7\1\1\11\35\1\1\0"+
                  "\5\1\2\0\14\1\2\0\30\1\1\0\2\1\1\0"+
                  "\1\1\1\11\1\0\6\1\1\0\2\1\1\0\1\1"+
                  "\1\0\17\1\1\0\4\1\1\0\5\1\1\0\3\1"+
                  "\1\11\2\0\3\1\1\0\2\1\2\0\13\1\1\0"+
                  "\5\1\1\0\1\1\1\0\5\1\1\0\2\1\1\0"+
                  "\1\1\1\0\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Hashtable pyTokensTable = new Hashtable<PyTokens, Integer>();
  private ArrayList<Token> tokens = new ArrayList<Token>();
  private int indentCounter = 0;
  private int indentLevel = 0;
  private boolean validBlock = false;
  private Stack<Integer> lineStack = new Stack<Integer>();

  public LexerAnalizer(java.io.Reader in, boolean init) {
    this.zzReader = in;
    initHashtable();
  }
  public Hashtable getPyTokensTable() {
    return this.pyTokensTable;
  }
  public String getReviewString() {
    String result = "";
    for (Token token : this.tokens)
      result += token.toString() + "\n";
    return result;
  }

  public void printReview() {
    for (Token token : this.tokens)
      System.out.print(token);
    System.out.println();
  }

  private PyTokens pyToken(String value, PyTokens token) {
    try {
      tokens.add(new Token(value, token.toString(), yyline));
      this.pyTokensTable.put(token, new Integer((int) this.pyTokensTable.get(token) + 1));
      return token;
    } catch (IllegalArgumentException e) {
      System.out.println(e.getMessage());
      return PyTokens.INVALID;
    }
  }

  private PyTokens verifyIndentation(String value, int line, int column) {
    for(char c : value.toCharArray()) {
      System.out.print(c);
      if (c == '\n') {
        this.indentCounter = 0;
        this.indentLevel++;
        validBlock = true;
        lineStack.push(this.indentCounter + 4);
      } else if (c == ' ' || c == 32) {
        this.indentCounter++;
      } else if (c == '\t') {
        this.indentCounter+=4;
      } else {
        validBlock = false;
      }

      try {
        if (validBlock && indentLevel != 0) {
          if (this.indentCounter >= (lineStack.lastElement())) {
            this.pyTokensTable.put(PyTokens.INDENT, new Integer((int) this.pyTokensTable.get(PyTokens.INDENT) + 1));
            tokens.add(new Token("", PyTokens.INDENT.toString(), line));
            lineStack.push(this.indentCounter + 3);
            System.out.print(" I ");
            return PyTokens.INDENT;
          }
        }
      } catch (IllegalArgumentException e) {
        return PyTokens.INVALID;
      }
    }
    return null;
  }

  private void initHashtable() {
    for(PyTokens token : PyTokens.values())
      this.pyTokensTable.put(token, new Integer(0));
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAnalizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerAnalizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }

    // numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PyTokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.KEYWORD);
        }
        case 11: break;
        case 2:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.INVALID_CHARACTER);
        }
        case 12: break;
        case 8:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.ERROR_IDENTIFIER);
        }
        case 13: break;
        case 1:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken("", PyTokens.BAD_ERROR);
        }
        case 14: break;
        case 9:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.ERROR_LITERAL);
        }
        case 15: break;
        case 4:
        { verifyIndentation(yytext(), yyline, yycolumn);
        }
        case 16: break;
        case 3:
        { /*         IGNORE        */
        }
        case 17: break;
        case 7:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.LITERAL);
        }
        case 18: break;
        case 5:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.IDENTIFIER);
        }
        case 19: break;
        case 6:
        { verifyIndentation(yytext(), yyline, yycolumn); return pyToken(yytext(), PyTokens.OPERATOR);
        }
        case 20: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
